# -*- coding: utf-8 -*-
"""
/***************************************************************************
 citygen
                                 A QGIS plugin
 A plugin to generate 3D models of urban areas
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-04-30
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Arthur Ruf Hosang da Costa (https://github.com/arthurRuf)
        email                : arthur.rhc@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


import os, processing
from qgis.core import QgsCoordinateReferenceSystem


def configure(appResources, appContext):
    pass

def execute(appResources, appContext):
    appResources.bibliotecas.logger.plugin_log("Identifying footprint.infos")
    # appContext.steps.gis.footprint.input_file =
    # footprint_layer = appContext.update_layer(
    #     appContext,
    #     f"{appContext.layers.footprint.layer_path}|layername=footprint|geometrytype=Polygon",
    #     "footprint",
    #     "ogr"
    # )
    # footprint_layer = appContext.update_layer(
    #     appContext,
    #     f"/Users/arthurrufhosangdacosta/qgis_data/extrusion/footprintg.geojson",
    #     "footprint",
    #     "ogr",
    #     "vector"
    # )

    neighbors_path = f"{appContext.execution.raw_temp_folder}/footprint/neighbors.tif"
    pixelstopolygons_path = f"{appContext.execution.raw_temp_folder}/footprint/pixelstopolygons.shp"
    footprints_path = f"{appContext.execution.raw_temp_folder}/footprint/pixelstopolygons.shp"

    processing.run(
        "grass7:r.neighbors",
        {
            'input': appContext.layers.dsm.layer.dataProvider().dataSourceUri(),
            'selection': appContext.layers.dsm.layer.dataProvider().dataSourceUri(),
            'method': 7,
            # 'size': 5,
            'size': 3,
            'gauss': None,
            'quantile': '',
            '-c': False,
            '-a': False,
            'weight': '',
            'output': neighbors_path,
            'GRASS_REGION_PARAMETER': None,
            'GRASS_REGION_CELLSIZE_PARAMETER': 9,
            'GRASS_RASTER_FORMAT_OPT': '',
            'GRASS_RASTER_FORMAT_META': ''
        }
    )

    processing.run(
        "qgis:rastercalculator",
        {
            'EXPRESSION': '(\"Neighbors@1\") / (\"Neighbors@1\" > 0)',
            'LAYERS': '',
            'CELLSIZE': 9,
            'EXTENT': None,
            'CRS': QgsCoordinateReferenceSystem('EPSG:4326'),
            'OUTPUT': 'TEMPORARY_OUTPUT'
        }
    )

    # processing.run(
    #     "native:pixelstopolygons",
    #     {
    #         'INPUT_RASTER': neighbors_path,
    #         'RASTER_BAND': 1,
    #         'FIELD_NAME': 'VALUE',
    #         'OUTPUT': pixelstopolygons_path
    #     }
    # )

    processing.run(
        "gdal:polygonize",
        {
            'INPUT': pixelstopolygons_path,
            'BAND': 1,
            'FIELD': 'DN',
            'EIGHT_CONNECTEDNESS': False,
            'OUTPUT': footprints_path
        }
    )

    appContext.update_layer(
        appContext,
        footprints_path,
        "footprint",
        "gdal",
        appContext
    )
